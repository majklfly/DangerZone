{"ast":null,"code":"import _objectSpread from\"C:\\\\dangerzone-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:\\\\dangerzone-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useReducer}from\"react\";export default(function(reducer,actions,initialState){var Context=React.createContext();var Provider=function Provider(_ref){var children=_ref.children;var _useReducer=useReducer(reducer,initialState),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];var boundActions={};for(var key in actions){boundActions[key]=actions[key](dispatch);}return/*#__PURE__*/React.createElement(Context.Provider,{value:_objectSpread({state:state},boundActions)},children);};return{Context:Context,Provider:Provider};});","map":{"version":3,"sources":["C:/dangerzone-react/src/context/createDataContext.js"],"names":["React","useReducer","reducer","actions","initialState","Context","createContext","Provider","children","state","dispatch","boundActions","key"],"mappings":"+RAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,KAAkC,OAAlC,CAEA,eAAe,SAACC,OAAD,CAAUC,OAAV,CAAmBC,YAAnB,CAAoC,CACjD,GAAMC,CAAAA,OAAO,CAAGL,KAAK,CAACM,aAAN,EAAhB,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,iBACPP,UAAU,CAACC,OAAD,CAAUE,YAAV,CADH,4CAC1BK,KAD0B,iBACnBC,QADmB,iBAGjC,GAAMC,CAAAA,YAAY,CAAG,EAArB,CACA,IAAK,GAAIC,CAAAA,GAAT,GAAgBT,CAAAA,OAAhB,CAAyB,CACvBQ,YAAY,CAACC,GAAD,CAAZ,CAAoBT,OAAO,CAACS,GAAD,CAAP,CAAaF,QAAb,CAApB,CACD,CAED,mBACE,oBAAC,OAAD,CAAS,QAAT,EAAkB,KAAK,gBAAID,KAAK,CAALA,KAAJ,EAAcE,YAAd,CAAvB,EACGH,QADH,CADF,CAKD,CAbD,CAeA,MAAO,CAAEH,OAAO,CAAPA,OAAF,CAAWE,QAAQ,CAARA,QAAX,CAAP,CACD,CAnBD","sourcesContent":["import React, { useReducer } from \"react\";\r\n\r\nexport default (reducer, actions, initialState) => {\r\n  const Context = React.createContext();\r\n\r\n  const Provider = ({ children }) => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n    const boundActions = {};\r\n    for (let key in actions) {\r\n      boundActions[key] = actions[key](dispatch);\r\n    }\r\n\r\n    return (\r\n      <Context.Provider value={{ state, ...boundActions }}>\r\n        {children}\r\n      </Context.Provider>\r\n    );\r\n  };\r\n\r\n  return { Context, Provider };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}